// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientsMedicines.DataLayer;

#nullable disable

namespace PatientsMedicines.Migrations
{
    [DbContext(typeof(MedicineResearchDbContext))]
    [Migration("20240103202115_AddAddress")]
    partial class AddAddress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PatientsMedicines.DataLayer.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressType = 0,
                            City = "Wrocław",
                            Country = "Polska",
                            FlatNumber = "14C",
                            HouseNumber = "500A",
                            PostalCode = "56-662",
                            Region = "Lower Silesia",
                            Street = "Borowska"
                        });
                });

            modelBuilder.Entity("PatientsMedicines.DataLayer.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "B"
                        });
                });

            modelBuilder.Entity("PatientsMedicines.DataLayer.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus rutrum nisi quis interdum tincidunt. \r\n                Suspendisse venenatis diam eu dui pulvinar, vel auctor felis aliquam. Quisque bibendum velit consectetur tellus suscipit, \r\n                sit amet accumsan enim sagittis. Vestibulum sit amet diam et orci pulvinar interdum. Nulla ac nulla a ligula euismod accumsan. \r\n                In ac turpis eu eros hendrerit sagittis. Aliquam erat volutpat. Aliquam blandit pretium congue.",
                            ExpiryDate = new DateOnly(2024, 1, 3),
                            Name = "Pfumoflux",
                            SerialNumber = "ASD1234QWER"
                        });
                });

            modelBuilder.Entity("PatientsMedicines.DataLayer.MedicineGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("GroupType")
                        .HasColumnType("int");

                    b.Property<int?>("MedicineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicineGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GroupId = 1,
                            GroupType = 0,
                            MedicineId = 1
                        },
                        new
                        {
                            Id = 2,
                            GroupId = 2,
                            GroupType = 1
                        });
                });

            modelBuilder.Entity("PatientsMedicines.DataLayer.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<decimal>("BMI")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 45,
                            BMI = 27m,
                            BirthDate = new DateOnly(1979, 1, 3),
                            EmailAddress = "jan.kowalski@email.com",
                            FirstName = "Jan",
                            Gender = 1,
                            Height = 175m,
                            LastName = "Kowalski",
                            PhoneNumber = "123456789",
                            SocialNumber = "72033075515",
                            Weight = 80m
                        },
                        new
                        {
                            Id = 2,
                            Age = 47,
                            BMI = 30m,
                            BirthDate = new DateOnly(1977, 1, 3),
                            EmailAddress = "janina.kowalska@email.com",
                            FirstName = "Janina",
                            Gender = 0,
                            Height = 155m,
                            LastName = "Kowalska",
                            PhoneNumber = "12345678",
                            SocialNumber = "72033075515",
                            Weight = 70m
                        });
                });

            modelBuilder.Entity("PatientsMedicines.DataLayer.PatientAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAddresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            PatientId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 1,
                            PatientId = 2
                        });
                });

            modelBuilder.Entity("PatientsMedicines.DataLayer.PatientMedicineGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MedicineGroupId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicineGroupId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientMedicineGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MedicineGroupId = 1,
                            PatientId = 1
                        },
                        new
                        {
                            Id = 2,
                            MedicineGroupId = 2,
                            PatientId = 2
                        });
                });

            modelBuilder.Entity("PatientsMedicines.DataLayer.MedicineGroup", b =>
                {
                    b.HasOne("PatientsMedicines.DataLayer.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatientsMedicines.DataLayer.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");

                    b.Navigation("Group");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("PatientsMedicines.DataLayer.PatientAddress", b =>
                {
                    b.HasOne("PatientsMedicines.DataLayer.Address", "Address")
                        .WithMany("PatientAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatientsMedicines.DataLayer.Patient", "Patient")
                        .WithMany("PatientAddresses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PatientsMedicines.DataLayer.PatientMedicineGroup", b =>
                {
                    b.HasOne("PatientsMedicines.DataLayer.MedicineGroup", "MedicineGroup")
                        .WithMany("PatientMedicineGroups")
                        .HasForeignKey("MedicineGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatientsMedicines.DataLayer.Patient", "Patient")
                        .WithMany("PatientMedicineGroups")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicineGroup");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PatientsMedicines.DataLayer.Address", b =>
                {
                    b.Navigation("PatientAddresses");
                });

            modelBuilder.Entity("PatientsMedicines.DataLayer.MedicineGroup", b =>
                {
                    b.Navigation("PatientMedicineGroups");
                });

            modelBuilder.Entity("PatientsMedicines.DataLayer.Patient", b =>
                {
                    b.Navigation("PatientAddresses");

                    b.Navigation("PatientMedicineGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
